import hudson.model.*
import hudson.EnvVars
//import groovyx.net.http.RESTClient

//http://224fac2050a6.ngrok.io/job/atomosphere%20pipeline/50/api/json?pretty=true
//http://620daac4c307.ngrok.io/user/sunilkumarrai2/configure
//test
defaults = [ 
                   "CRQ":"33213213",
                   "ENV":"uat",
                   "STACK_IDENTIFIER":"2",
                   "DEBUG": true,
                   "INPUT_ARGUMENTS":'{"load_type": "monthly","group_codes":[],"processed_date":""}',
                   "glue_job_name_to_be_stopped":'chp-f360-gde-1-medical-etl-uat',
                   "TAGS":"code_deploy",
                   "PLAYBOOK":"code_deploy",
                   "BRANCH":"r630166",
                   "APPLICATION":"",
                   "PLAYBOOK_DIR":"playbooks/",
                   "OPTIONS":"",
       ]

choices = [ 
                   "ENV":"poc\ndev\nsit\nuat",
                   "STACK_IDENTIFIER":'1\n2\n3\n4\n5\n6\n7\n8',
                   "TAGS":"none\ncode_deploy\ndynamodb_attribute\ndynamodb_operational\ndynamodb_configurational\ns3\nsns\niam\netl_driver_lambda\nom_cleanup_lambda\nglue_job_migrate_cmt\nglue_job_load_attribute_table\nglue_job_enrollment_etl\nglue_job_medical_driver\nglue_job_medical_etl\nglue_job_vision_etl\nglue_job_vsp_extract_etl\nstep_function\nall_glue_jobs\nstop_job_runs\nclear_om_table\nall",
                   "PLAYBOOK":"provision_f360\nprovision_lambda\nterminate_f360\nterminate_lambda\nexecute_f360\ncode_deploy\njenkinsfile_update",
                   "APPLICATION":"chp-f360-gde-app",
                   "OPTIONS":"\ncheck\nlist-hosts\nlist-tags\nlist-tasks\nsyntax-check",
       ]
node{
//curl --silent --show-error http://sunilkjumarrai2:116bf8ce6b0e0cbe97327a9702f007b47d@620daac4c307.ngrok.io/job/atomosphere%20pipeline/50/api/json?pretty=true
response = sh(script: 'curl http://620daac4c307.ngrok.io/job/atomosphere%20pipeline/50/api/json?pretty=true --user sunilkumarrai2:116bf8ce6b0e0cbe97327a9702f007b47d', returnStdout: true)
//print(response["actions"][2]["parameters"])
print(response)
}
def computeChoice(choices, paramName){
  choiceList = choices.split('\n');
  res = defaults[paramName] + "\n"
  for (String item : choiceList) {
        if(item != defaults[paramName]){
            res = res + item + "\n"
        }
    }
  return res
}
               
script {
            env.defaultBranch = "development"
            print(currentBuild.toString())
            print("HELLO WORLD")
            print(env.BRANCH_NAME)
            //def cls = currentBuild.getPreviousBuild().getRawBuild().actions.find{ it instanceof ParametersAction }?.parameters
            //print(cls)
            //def response = sh 'curl http://620daac4c307.ngrok.io//job/atomosphere%20pipeline/50/api/json?pretty=true'
            //def response = sh(script: 'curl http://620daac4c307.ngrok.io//job/atomosphere%20pipeline/50/api/json?pretty=true', returnStdout: true)
            //print(response)
        }
        
pipeline {
   agent any
   
   parameters {
                string name: 'file_location',
                       defaultValue: "../new/",
                       description: 'CRQs are required for UAT and PRD'
                string name: 'CRQ',
                       defaultValue: defaults.CRQ,
                       description: 'CRQs are required for UAT and PRD'
                choice name: 'ENV',
                       choices: computeChoice(choices.ENV , 'ENV'),
                       description: 'Choose AWS Account'
                choice name: 'STACK_IDENTIFIER',
                       choices: computeChoice(choices.STACK_IDENTIFIER , 'STACK_IDENTIFIER'),
                       description: 'Choose function'
                booleanParam name: 'DEBUG',
                             defaultValue: defaults.DEBUG,
                             description:'Turn on debugging'
                string name: 'INPUT_ARGUMENTS',
                       defaultValue: defaults.INPUT_ARGUMENTS,
                       description: """INPUT_ARGUMENTS are only needed when you use execute_f360 playbook with step_function tag<br>
                                        sample argument for adhoc run:{"load_type": "adhoc","group_codes":[{"group_code":"abc1","start_date":"20180901","end_date":"20190901"},{"group_code":"abc2","start_date":"20180901","end_date":"20190901"},and so on...],"processed_date":"20200214"}<br>"""
                string name: 'glue_job_name_to_be_stopped',
                       defaultValue: defaults.glue_job_name_to_be_stopped,
                       description: """This input is used only when we want to stop all instances of given glue job in running state. Choose "execute_f360" playbook and "stop_job_runs" tag"""
                choice name: 'TAGS',
                       choices: computeChoice(choices.TAGS , 'TAGS'),
                       description: 'Ansible --tags'
                choice name: 'PLAYBOOK',
                       choices: computeChoice(choices.PLAYBOOK , 'PLAYBOOK'),
                       description: """Playbook to run. Examples:<br>
                                        jenkinsfile_update<br>
                                        provision_f360<br>
                                        provision_lambda<br>
                                        terminate_f360<br>
                                        terminate_lambda<br>
                                        execute_f360<br>"""
                string name: 'BRANCH',
                       defaultValue: defaults.BRANCH,
                       description: """Branch to build from. Examples:<br>
                                      */master - master branch<br>
                                      */development - development branch<br>"""
                choice name: 'APPLICATION',
                       choices: computeChoice(choices.APPLICATION , 'APPLICATION'),
                       description: 'Application to build'
                string name: 'PLAYBOOK_DIR',
                       defaultValue: defaults.PLAYBOOK_DIR,
                       description: 'An optional additional directory'
                choice name: 'OPTIONS',
                       choices: computeChoice(choices.OPTIONS , 'OPTIONS'),
                       description: """check - do not make any changes; instead, try to predict some of the changes that may occur<br>
                                    list-hosts - outputs a list of matching hosts; does not execute anything else<br>
                                    list-tags - list all available tags<br>
                                    list-tasks - list all tasks that would be executed<br>
                                    syntax-check - perform a syntax check on the playbook, but do not execute it<br>"""
              } 

   stages {
              stage('Hello') {
                     steps {
                     sh "echo '*********************************'"
                     sh "echo file_location : ${params.file_location}"
                     sh "echo crq : ${params.CRQ}"
                     sh "echo env : ${params.ENV}"
                     sh "echo getBuildCauses : ${currentBuild.previousBuild}"
                     //sh "echo all_param : ${env.all_parameters}"
                     sh "echo '*********************************'"
                     //git credentialsId: 'bf5e3fbc-9467-41c0-942b-13c4ed7cc822', url: 'https://github.com/sunilkumarrai2/Ansible.git'
                     sh "echo ${params.file_location}"
                     sh "rm -rf ${params.file_location}"
                     sh "cp -r . ${params.file_location}"
                     }
                     
                     }
          }
}
